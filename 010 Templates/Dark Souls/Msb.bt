//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File: Dark Souls .MSB (Map Zone Layout)
// Author: Jed "Nyxojaele" Lang
// Revision: 1
//--------------------------------------
//***************************************
//
//          BASE STRUCTS
//
//***************************************
typedef struct(long offset)
{
    int Offset <format=hex>;
    local long oldPos = FTell();
    FSeek(offset + Offset);
    string Text;
    FSeek(oldPos);
} NameStruct <read=ReadNameStruct, bgcolor=0xEEAA33>;
string ReadNameStruct(NameStruct& ns)
{
    string ret;
    SPrintf(ret, "%s", ns.Text);
    return ret;
}
typedef struct
{
    float X;
    float Y;
    float Z;
} Vector3Struct <read=ReadVector3Struct>;
string ReadVector3Struct(Vector3Struct& v3s)
{
    string ret;
    SPrintf(ret, "%f, %f, %f", v3s.X, v3s.Y, v3s.Z);
    return ret;
}

//***************************************
//
//          UNKNOWN STRUCTS
//
//***************************************
typedef struct
{
    int Offset <format=hex>;
    if (Offset != 0)
    {
        local long oldPos = FTell();
        FSeek(structRoot + Offset);
        int Data1 <format=hex>;
        FSeek(oldPos);
    }
} UnknownPtr1 <read=ReadUnknownPtr1>;
string ReadUnknownPtr1(UnknownPtr1& up)
{
    if (exists(up.Data1))
    {
        string ret;
        SPrintf(ret, "%X", up.Data1);
        return ret;
    }
    return "<empty>";
}

typedef struct
{
    int Offset <format=hex>;
    if (Offset != 0)
    {
        local long oldPos = FTell();
        FSeek(structRoot + Offset);
        int Data1 <format=hex>;
        int Data2 <format=hex>;
        FSeek(oldPos);
    }
} UnknownPtr2 <read=ReadUnknownPtr2>;
string ReadUnknownPtr2(UnknownPtr2& up)
{
    if (exists(up.Data1))
    {
        string ret;
        SPrintf(ret, "%X, %X", up.Data1, up.Data2);
        return ret;
    }
    return "<empty>";
}

typedef struct
{
    int Offset <format=hex>;
    if (Offset != 0)
    {
        local long oldPos = FTell();
        FSeek(structRoot + Offset);
        float Data1;
        float Data2;
        float Data3;
        FSeek(oldPos);
    }
        
} UnknownPtr3 <read=ReadUnknownPtr3>;
string ReadUnknownPtr3(UnknownPtr3& up)
{
    if (exists(up.Data1))
    {
        string ret;
        SPrintf(ret, "%f, %f, %f", up.Data1, up.Data2, up.Data3);
        return ret;
    }
    return "<empty>";
}

typedef struct
{
    int Offset <format=hex>;
    if (Offset != 0)
    {
        local long oldPos = FTell();
        FSeek(structRoot + Offset);
        int Data1 <format=hex>;
        int Data2 <format=hex>;
        int Data3 <format=hex>;
        int Data4 <format=hex>;
        int Data5 <format=hex>;
        int Data6 <format=hex>;
        FSeek(oldPos);
    }
        
} UnknownPtr6 <read=ReadUnknownPtr6>;
string ReadUnknownPtr6(UnknownPtr6& up)
{
    if (exists(up.Data1))
    {
        string ret;
        SPrintf(ret, "%X, %X, %X, %X, %X, %X", up.Data1, up.Data2, up.Data3, up.Data4, up.Data5, up.Data6);
        return ret;
    }
    return "<empty>";
}

//***************************************
//
//           MODEL PARAMS
//
//***************************************
typedef struct
{
    int Offset <format=hex>;
    local long oldPos = FTell();
    FSeek(Offset);

    local long structRoot = FTell();
    NameStruct Name(structRoot);
    int Type;                       //0 = Map Piece, 1 = Object, 2 = Enemy, 4 = Player?, 5 = Collision, 6 = Navimesh
    int LocalId;
    NameStruct Filename(structRoot);
    int InstanceCount;

    FSeek(oldPos);
} ModelStruct <read=ReadModelStruct, bgcolor=0x0000BB>;
string ReadModelStruct(ModelStruct& mpss)
{
    string ret;
    SPrintf(ret, "%s", mpss.Name.Text);
    return ret;
}

typedef struct
{
    NameStruct Signature(0);
    int EntryCount;
    local int ptr2Struct;
    local int data;
    local int i;
    struct
    {
        for (i = 0; i < EntryCount; ++i)
        {
            ptr2Struct = ReadInt(FTell());
            if (ptr2Struct == 0)
            {
                int EndMarker;
                continue;
            }
            data = ReadInt(ptr2Struct);
            if (data == 0)
            {
                int EndPtr;
                FSeek(EndPtr);
                int EndMarker;
                FSeek(ptr2Struct + 4);
                continue;
            }
    
            ModelStruct Model;
        }
    } Models;
} ModelParamStStruct <read=ReadModelParamStStruct, bgcolor=0x009900>;
string ReadModelParamStStruct(ModelParamStStruct& ps)
{
    string ret;
    SPrintf(ret, "%s", ps.Signature.Text);
    return ret;
}

//***************************************
//
//           EVENT PARAMS
//
//***************************************
typedef struct
{
    int Offset <format=hex>;
    local long oldPos = FTell();
    FSeek(Offset);

    local long structRoot = FTell();
    NameStruct Name(structRoot);
    int Id;

    //0 = Point Light
    //1 = BGM?
    //2 = Particle Effects
    //3 = Wind (Physics? Global?)
    //4 = Treasure (Global?)
    //5 = ???
    //6 = "Blood Magic Character"
    //7 = Openable (Door/Chest)
    //8 = "Resurrection Event"
    //9 = ???
    //10 = Navimesh helper? (for doors)
    //11 = Collision Mesh?
    //more?
    int Type;
    int LocalId;

    struct
    {
        int Op1Offset <format=hex>;
        local long preOp1Pos = FTell();
        FSeek(structRoot + Op1Offset);
        int Element1;   //For torch: 00,FF,9301 cause no render, 01,02,A801 cause no change?
        int PointIndex;
        int Element3;
        int Element4;
        FSeek(preOp1Pos);
    } Op1Data;

    struct
    {
        int Op2Offset <format=hex>;
        local long preOp2Pos = FTell();
        FSeek(structRoot + Op2Offset);
        switch (Type)
        {
            case 0: //Light
                int Element1;
                break;
            case 1: //Audio
                int Element1;
                int Element2;
                break;
            case 2: //Particle Effect
                int ParticleEffectId;
                break;
            case 3:
                int Element1;
                int Element2;
                int Element3;
                int Element4;
                int Element5;
                int Element6;
                int Element7;
                int Element8;
                int Element9;
                int Element10;
                int Element11;
                int Element12;
                int Element13;
                int Element14;
                int Element15;
                int Element16;
                break;
            case 4:
                int Element1;
                int Element2;
                int Element3;
                int Element4;
                int Element5;
                int Element6;
                int Element7;
                int Element8;
                int Element9;
                int Element10;
                int Element11;
                int Element12;
                int Element13;
                break;
            case 5:
                int Element1;
                int Element2;
                int Element3;
                int Element4;
                int Element5;
                int Element6;
                int Element7;
                int Element8;
                int Element9;
                int Element10;
                int Element11;
                int Element12;
                int Element13;
                int Element14;
                int Element15;
                int Element16;
                int Element17;
                int Element18;
                int Element19;
                int Element20;
                int Element21;
                int Element22;
                int Element23;
                int Element24;
                int Element25;
                int Element26;
                int Element27;
                int Element28;
                int Element29;
                int Element30;
                int Element31;
                int Element32;
                int Element33;
                int Element34;
                int Element35;
                int Element36;
                int Element37;
                int Element38;
                int Element39;
                int Element40;
                int Element41;
                int Element42;
                int Element43;
                int Element44;
                int Element45;
                int Element46;
                int Element47;
                int Element48;
                int Element49;
                int Element50;
                int Element51;
                int Element52;
                int Element53;
                int Element54;
                int Element55;
                int Element56;
                int Element57;
                int Element58;
                int Element59;
                int Element60;
                int Element61;
                int Element62;
                int Element63;
                int Element64;
                break;
            case 6:
                int Element1;
                int Element2;
                break;
            case 7:
                int Element1;
                int Element2;
                int Element3;
                int Element4;
                break;
            case 8:
                int Element1;
                int Element2;
                int Element3;
                int Element4;
                break;
            case 9:
                int Element1;
                int Element2;
                int Element3;
                int Element4;
                break;
            case 10:
                int Element1;
                int Element2;
                int Element3;
                int Element4;
                break;
            case 11:
                int Element1;
                int Element2;
                int Element3;
                int Element4;
                int Element5;
                int Element6;
                int Element7;
                int Element8;
                break;
            default:
                Printf("Unknown event type %d @ %X", Type, FTell());
                break;
        }
        FSeek(preOp2Pos);
    } Op2Data;

    int Null;

    FSeek(oldPos);
} EventStruct <read=ReadEventStruct, bgcolor=0x00BB00>;
string ReadEventStruct(EventStruct& epss)
{
    string ret;
    SPrintf(ret, "%s", epss.Name.Text);
    return ret;
}

typedef struct
{
    NameStruct Signature(0);
    int EntryCount;
    local int ptr2Struct;
    local int data;
    local int i;
    struct
    {
        for (i = 0; i < EntryCount; ++i)
        {
            ptr2Struct = ReadInt(FTell());
            if (ptr2Struct == 0)
            {
                int EndMarker;
                continue;
            }
            data = ReadInt(ptr2Struct);
            if (data == 0)
            {
                int EndPtr;
                FSeek(EndPtr);
                int EndMarker;
                FSeek(ptr2Struct + 4);
                continue;
            }
    
            EventStruct Event;
        }
    } Events;
} EventParamStStruct <read=ReadEventParamStStruct, bgcolor=0x009900>;
string ReadEventParamStStruct(EventParamStStruct& ps)
{
    string ret;
    SPrintf(ret, "%s", ps.Signature.Text);
    return ret;
}

//***************************************
//
//           POINT PARAMS
//
//***************************************
typedef struct
{
    int Offset <format=hex>;
    local long oldPos = FTell();
    FSeek(Offset);

    local long structRoot = FTell();
    NameStruct Name(structRoot);
    int Unknown1;
    int Id;
    int Unknown2;
    Vector3Struct Position;
    Vector3Struct Rotation;
    UnknownPtr1 Unknown6;
    UnknownPtr1 Unknown7;
    UnknownPtr3 Unknown8;
    UnknownPtr1 Unknown9;
    int Unknown10;

    FSeek(oldPos);
} PointStruct <read=ReadPointStruct, bgcolor=0x00BBBB, fgcolor=0xFFFFFF>;
string ReadPointStruct(PointStruct& ppss)
{
    string ret;
    SPrintf(ret, "%s", ppss.Name.Text);
    return ret;
}

typedef struct
{
    NameStruct Signature(0);
    int EntryCount;
    local int ptr2Struct;
    local int data;
    local int i;
    struct
    {
        for (i = 0; i < EntryCount; ++i)
        {
            ptr2Struct = ReadInt(FTell());
            if (ptr2Struct == 0)
            {
                int EndMarker;
                continue;
            }
            data = ReadInt(ptr2Struct);
            if (data == 0)
            {
                int EndPtr;
                FSeek(EndPtr);
                int EndMarker;
                FSeek(ptr2Struct + 4);
                continue;
            }
    
            PointStruct Point;
        }
    } Points;
} PointParamStStruct <read=ReadPointParamStStruct, bgcolor=0x009900>;
string ReadPointParamStStruct(PointParamStStruct& ps)
{
    string ret;
    SPrintf(ret, "%s", ps.Signature.Text);
    return ret;
}

//***************************************
//
//           PARTS PARAMS
//
//***************************************
typedef struct
{
    int Offset <format=hex>;
    local long oldPos = FTell();
    FSeek(Offset);

    local long structRoot = FTell();
    NameStruct Name(structRoot);
    //Note that there is a type 2 and type 4 that use the modelparam ID associated with c0000 - why?
    int Type;                       //0 = Map Piece, 1 = Object, 2 = Entity, 4 = Player?, 5 = Collision, 8 = Navimesh, 9 = Interactable? (bonfire, body?), 10 = Unknown (Bone-only FLVER?, Basilisk), 11 = Unknown (More collision?)
    int LocalId;
    int ModelParamIndex;
    NameStruct LayoutFilename(structRoot);
    Vector3Struct Translation;
    Vector3Struct Euler;
    Vector3Struct Scale;
    int Unknown2;
    int Unknown3;
    int Unknown4;
    int Unknown5;
    int Unknown6;
    int Unknown7;
    int Unknown8;
    int Unknown9;
    UnknownPtr6 Unknown10;
    UnknownPtr2 Unknown11;
    int Unknown12;

    FSeek(oldPos);
} PartStruct <read=ReadPartStruct>;
string ReadPartStruct(PartStruct& ppss)
{
    string ret;
    SPrintf(ret, "%s", ppss.Name.Text);
    return ret;
}

typedef struct
{
    NameStruct Signature(0);
    int EntryCount;
    local int ptr2Struct;
    local int data;
    local int i;
    struct
    {
        for (i = 0; i < EntryCount; ++i)
        {
            ptr2Struct = ReadInt(FTell());
            if (ptr2Struct == 0)
            {
                int EndMarker;
                continue;
            }
            data = ReadInt(ptr2Struct);
            if (data == 0)
            {
                int EndPtr;
                FSeek(EndPtr);
                int EndMarker;
                FSeek(ptr2Struct + 4);
                continue;
            }
            PartStruct Part;
        }
    } Parts;
} PartsParamStStruct <read=ReadPartsParamStStruct, bgcolor=0xBB00BB>;
string ReadPartsParamStStruct(PartsParamStStruct& ppss)
{
    string ret;
    SPrintf(ret, "%s", ppss.Signature.Text);
    return ret;
}

int Unknown1;
ModelParamStStruct Models;
EventParamStStruct Events;
PointParamStStruct Points;
PartsParamStStruct Parts;